a. ROS ( Robot Operating System ) adalah sebuah software yang menyediakan berbagai macam libraries dan tools untuk membantu dalam mengonstruksi sebuah robot. ROS sangat berguna dalam perkembangan robot di era modern seperti sekarang ini karena ia berfungsi sebagai kerangka dasar dalam pengerjaan robot. Hal ini sangat membantu dalam konteks ketika kita ingin membuat sebuah robot yang memiliki fungsi spesifik dan kompleks, semua hal dasar yang menjadi program kerangka untuk robot itu telah terkandung pada ROS sehingga kita hanya perlu membangun fungsi canggih dari robot tersebut saja. Pada sebuah robot kebanyakan robot sekaran, terdapat antarmuka sensor dan kamera yang memiliki fungsi untuk melihat dan juga aktuator yang berfungsi untuk bergerak. ROS membantu kita untuk dengan mudah menciptakan hal-hal ini dan juga mengintegrasi dan menghubungkannya  bersama-sama dalam lingkungan ROS dengan ROS tools yang disebut topics dan messages. 


b. Perbedaan utama pada ROS dan ROS2 adalah middleware pihak ketiga yang digunakan. ROS menggunakan middlewarenya sendiri yang menggunakan suatu jaringan tersendiri untuk komunikasi antarnodes ( node adalah program yang menggunakan ROS untuk dieksekusi dan berkomunikasi ) sedangkan ROS2 menggunakan middleware external yaitu dds yang merupakan middleware yang telah terbukti fungsi dan kualitasnya di industri sehingga akan memperkecil kerentanan terjadinya error. Semua proyek robotika yang bersifat open source ( dapat diakses siapapun ) yang saat ini sedang dikembangkan semuanya telah pindah ke ROS2 sehingga jika kita menggunakan ROS kita tidak akan mendapatkan pengembangan dari fungsi-fungsi ini lagi. Hal ini yang membuat banyak perusahaan mempertimbangkan untuk pindah ke ROS2 sebagai investasi jangka panjang. Dari segi performa, ROS2 lebih unggul karena menggunakan middleware dds, ROS2 tidak memiliki ROS Master yang dimiliki ROS, sehingga nodes dapat mencari 1 sama lain secara tanpa perlu dependen kepada ROS Master, dan ROS2 juga memiliki implementasi yang sama dalam penjalanan program baik dalam c++ maupun python sehingga dapat memberikan kita keleluasaan dalam memilih. Dari segi keamanan, ROS2 juga lebih unggul karena mengandung sistem keamanan bawaan sedangkan sistem keamanan hanyalah pelangkap pada ROS. Lalu dari segi pemeliharaan jangka panjang, ROS2 juga lebih unggul dalam pemeliharaan jangka panjang karena dalam peluncurannya menggunakan basis file python berbeda dengan ROS yang menggunkanan basis file XML, hal ini sangat menguntungkan karena kita bisa memiliki akses yang lebih mudah dalam kontrol ke file yang berbasis python yang akan mirip seperti programming biasa saja dibandingkan file yang berbasis xml.


c. 3. Simulasi merupakan hal yang sangat krusial dalam pembuatan robot karena kita dapat mengestimasi bagian mana yang tidak berjalan sesuai keinginan kita tanpa harus mengeluarkan suatu biaya pun. pada intinya, ini adalah proses efisiensi biaya. Bayangkan jika kita membuat sebuah robot yang seharusnya dapat mengambil secangkir kopi untuk kita, kita tidak melakukan simulasi karena kita sudah sangat percaya diri akan robot tersebut. Namun, ketika robot tersebut nyata dan berbentuk fisik, ia tidak dapat mengidentifikasi segelas cangkir kopi sehingga cenderung membawa kita barang yang lain. Hal ini akan menimbulkan kita kerugian uang yang besar karena kita harus menghasilkan komponen dengan program yang berbeda lagi untuk robot tersebut.


d.Gazebo adalah simulator robotika 2D/3D sumber terbuka ( open source ) yang berfungsi sebagai lingkungan dalam mensimulasikan robot. Untuk mensimulasikan robot, langkah-langkah yang harus dilakukan adalah
1. Install ROS 2 dan Gazebo dengan melalui deb packages atau mengcompile dari resource 
2. buka gazebo dan gunakan salah satu worlds yaitu visualize_lidar.sdf dengan mengetik command ign gazebo -v 4 -r visualize_lidar.sdf di terminal
3. jika kita membuka topic list dengan command ros2 topic list di terminal, tidak akan ada yang muncul karena kita belum meluncurkan nodes apapun dengan ROS 2
4. untuk mengconfigurasi ROS 2, kita harus memakai package ros_gz_bridge dengan mengetik command "sudo apt-get install ros-humble-ros-ign-bridge" di terminal
5. pada titik ini, kita dapat meluncurkan bridge ROS 2 dengan gazebo pada topik /model/vehicle_blue/cmd_vel melalui command  source /opt/ros/humble/setup.bashros2 run ros_gz_bridge parameter_bridge /model/vehicle_blue/cmd_vel@geometry_msgs/msg/Twist]ignition.msgs.Twist pada terminal
6. saat bridge berjalan, robot akan dapat mengikuti perintah dan kita dapat mengirim perintah melalui ros2 topic pub dengan mengetik command ros2 topic pub /model/vehicle_blue/cmd_vel geometry_msgs/Twist "linear: { x: 0.1 }" pada terminal
7. untuk memvisualisasikan lidar ( light detection and ranging ), kita harus meluncurkan bridge lidar pada topic /lidar2 yang berada dalam topic /lidar_scan dengan mengetik command source /opt/ros/humble/setup.bashros2 run ros_gz_bridge parameter_bridge /lidar2@sensor_msgs/msg/LaserScan[ignition.msgs.LaserScan --ros-args -r /lidar2:=/laser_scan di terminal 
8. untuk memvisualisasikan lidar di ROS 2, kita dapat memakai Rviz2 melalui command source /opt/ros/humble/setup.bashrviz2 di terminal
9. Lalu kita configurasi fixed_frame dan tekan add untuk menambahkan display dalam visualisasi lidar
10. setelah itu kita dapat melihat lidar pada Rviz2


e. Pada navigasi untuk robot, terdapat konsep Lokalisasi dan mapping adalah dua tugas terpenting bagi robot bergerak . Kita ingin tahu di mana kita berada, dan kita perlu mampu membuat rencana tentang cara mencapai tujuan. Tentu saja kedua masalah ini tidak berdiri sendiri, tetapi saling terkait erat. proses menentukan lokasi robot bergerak terhadap lingkungannya . Lokalisasi adalah salah satu kompetensi paling mendasar yang dibutuhkan oleh robot otonom karena pengetahuan tentang lokasi robot itu sendiri merupakan pendahulu penting untuk membuat keputusan tentang tindakan selanjutnya. mapping/pemetaan adalah proses pergerakan robot di lingkungannya untuk mengumpulkan data sensor guna membuat peta. 


f. TF ( Transform ) adalah sebuah paket pada ROS yang berfungsi untuk memungkinkan pengguna untuk terus melacak beberapa koordinat frame dari waktu ke waktu dan membuat komputasi ke 1 frame lalu mengubah koordinat frame tersebut ke koordinat frame yang lain kapanpun kita inginkan. 
Contohnya dalam simulasi:
kita memiliki 2 robot yang diantaranya terdapat sebuah tiang, robot 1 dapat melacak koordinat frame tiang tersebut namun robot 2 tidak, sehingga kita harus menggunakan TF untuk mentransfer koordinat frame tiang tersebut menurut robot 1 ke koordinat frame tiang terhadap robot 2. Begitu juga jika sebaliknya robot 2 yang dapat melacak dan nomor 1 tidak dapat melacak tiang tersebut.